plugins {
    // application表示应用程序模块，library表示库模块，区别在于前者可以独立运运行，后者只能依赖其他应用程序模块来运行
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// android闭包作用：配置项目构建的各种属性
android {
    compileSdk 32 // 项目的编译版本

    defaultConfig {
        applicationId "com.xyl.first" // 应用唯一标识符，默认为包名
        minSdk 21 // 最低兼容的版本
        targetSdk 32 // 在该版本上已做充分的测试，启用该版本的新特性和功能
        versionCode 1 // 版本号
        versionName "1.0" // 版本名

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner" // 在当前项目中启用JUnit测试
    }

    // buildType用于指定生成安装文件的相关配置，通常有debug和release两种，debug闭包用于生成测试版安装文件的配置，release为正式版
    buildTypes {
        release {
            minifyEnabled false // 是否对项目代码进行混淆，true为混淆，false为不混淆

            // proguardFiles用于指定混淆时使用的规则文件，
            // proguard-android-optimize.txt 是在<Android SDK>/tools/proguard目录下，里面是所有项目通用的混淆规则
            // proguard-rules.pro 是在当前项目的根目录下，里面可以编写项目特有的混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

/**
 * dependencies闭包：指定当前项目所有的依赖关系，依赖的种类有三种：本地依赖、库依赖、远程依赖
 * 本地依赖：对本地的jar包或目录添加依赖关系
 * 库依赖：对项目中的库模块添加依赖关系，使用关键字 implementation project，例如 implementation project(':Demo')
 * 远程依赖：对jcenter仓库上的开源项目添加依赖关系，使用关键字implementation，表示远程依赖声明
 *
 * androidTestImplementation:用于声明测试用例库
 */
dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}