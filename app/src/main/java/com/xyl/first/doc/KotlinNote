
1.关键字val和var
    val: (value的简写)，用来声明一个不可变的变量
    var: (variable的简写)，用来声明一个可变的变量
    可变与不可变的关键在于：在初始赋值之后是否可以再次重新赋值

    使用关键字声明变量准则：优先使用val，不满足再使用var

2.方法与函数
    函数翻译自Function,方法翻译自method，没有区别，只是不同语言的叫法习惯不一样而已。
    java叫方法比较普遍，kotlin中叫函数更普遍一些。

    函数：函数是用来运行代码的载体，可以在一个函数中华编写很多代码，当运行这个函数时，函数中所有代码会全部执行。
    main函数是程序的入口函数，kotlin中使用关键字fun来声明函数，类似于java中的void

3.常见函数
    max:返回两者之间最大值
    is：相当于java中的instanceOf关键字，判断类型
    for循环：until升序，左闭右开，downTo降序

    listOf:创建不可变有序集合
    mutableListOf:创建可变有序集合,示例：val list = mutableListOf("A","B","C")
    setOf:创建不可变无序集合
    mutableSetOf:创建可变无序集合,示例：val list = mutableSetOf("A","B","C")
    mapOf:创建不可变键值对集合
    mutableMapOf:创建可变键值对集合,示例：val maps = mutableMapOf("A","B","C")

    maxBy:是一个普通函数，接收的是Lambda类型的参数，根据传入的条件来遍历集合，从而找到该条件下的最大值。
    map: 集合中的map函数，用于将集合中的每个元素都映射成一个另外的值，映射的规则在Lambda表达式中指定，最终生成一个新的集合。
        示例(将集合中所有的元素都变为大写)：val newList = list.map{it.toUpperCase()}
    filter:用于过滤集合中的数据，可单独使用，也可以配合map使用
        示例(过滤机集合中元素长度大于5的数据，并将其全部转为大写)：val newList = list.filter{ it.length > 5 }.map{ it.toUpperCase()}
    any:用于判断集合中是否至少存在一个元素满足指定条件
    all：用于判断集合中是否所有元素都满足指定条件
    with:可以连续调用同一个对象的多个方法事代码变得更加精简，有两个参数，第一个参数是任意类型的对象，第二个是Lambda表达式，Lambda表达式的最好一行会作为with函数的返回值返回
        示例:val str = with(StringBuilder()){
                append("A")
                append("B")
                toString()
            }
    run:使用场景和with类似，但是run不能直接调用，一定要调用某个对象的run函数才行，其次run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文
        示例：val result = StringBuilder().run {
                append("A")
                append("B")
                toString()
            }
    apply:与run类似，也是需要在某个对象上调用，并且只接收一个Lambda参数，也会在Lambda表达式中提供调用对象的上下文，但是apply无法指定返回值，而是会自动返回调用对象本身
        示例代码：val result = StringBuilder().apply {
                    append("A")
                    append("B")
                }
                // result 为StringBuilder对象本身，所以要打印字符串需要toString()s
                println(result.toString)

    repeat:允许传入一个数值n，然后会把后边Lambda表达式中的内容执行n遍，
        示例代码：打印8遍字符串Kotlin
                repeat(8){
                    System.out.println("Kotlin")
                }

4.面向对象的基本思想
    基本思想：通过对类的封装，在合适的时机创建该类的对象，然后调用对象中的字段和函数来满足实际编程的需求
    特性：例如封装、继承、多态等
    基本用法：先将事物封装成具体的类，然后将事物所拥有的属性和能力分别定义成类中的字段和函数，
            接下来对类进行实例化，再根据具体的编程需求调用类中的字段和方法。

5.关键字
    open:用来修改类，表示当前类可被继承
    data:表明当前类是数据类(省略了equals、hashCode、toString方法)
    object:声明单例类，例如：object SingleTon {}
    const:声明常量，只能在单例类、companion object或顶层方法中才可以使用
    sealed class:密封类

6.访问权限修饰符
    public:对所有类可见，kotlin默认修饰符
    private:对当前类内部可见
    protected:对当前类和子类可见
    internal:只对同一模块中的类可见（kotlin特有）
    lateinit：对当前变量延迟初始化(即：告知Kotlin编译器，晚些会对此变量进行初始化，一开始声明时就无需赋值为null了)

7.List和Set的区别
    List可以允许重复的对象，Set不允许有重复的对象
    List可以插入多个null元素，而Set只允许插入一个null元素
    List是一个有序的容器，保持了每个元素的插入顺序，输出的顺序就是输入的顺序；Set是无序容器，无法保证每个元素的存储顺序

    总而言之：List和Set的最大区别就在于集合的元素是否有序

8.判空操作符
    ?. --->当对象不为空时，正常调用对象相应的方法，对象为空时什么都不做
    ?: --->这个操作符，左右两边都接收一个表达式，如果左边表达式的结果不为空就返回左边表达式的结果，否则就返回右边表达式的结果
        示例1：val name = a?:b
        示例2：fun getTextLength(text:String?) = text?.length?:0
    !! --->非空断言操作符，表示确信这个对象不会为空，无需做空指针检查，如果为空则，直接程序抛出空指针异常
    ?.let--->表示对象为空时，什么都不做，对象不为空时就调用let函数，而let函数会将对象本身传递到let函数之中去，这样保证了let函数中对象不为空

9.字符串内嵌表达式、函数的参数默认值、具名函数
    9.1 字符串内嵌表达式:省去了频繁的拼接字符串的麻烦，示例："Hello,${student.name}"
    9.2 函数的参数默认值:可以用来替代次构造函数，也可以在定义函数的时候给任意参数设定一个默认值，当调用参数时，
            不会强制要求调用方为此参数传值，没有传值的情况下，会自动使用参数的默认值。
            例如：
                方法：fun printParams(num:Int,str:String="hello"){ println("num is $num , str is $str") }
                调用方法：printParams(100)
    9.3 具名函数：传参时以键值对的方式传递
            示例：
                方法：fun printParams(num:Int = 0,str:String="hello"){ println("num is $num , str is $str") }
                调用方法：printParams(str = "kotlin")

10.单例类
    静态方法：也叫做类方法，指的就是那种不需要创建实例就能调用的方法，所有主流的编程语言都会支持静态方法这个特性。
    kotlin中的单例类，类似于Java中的静态方法，Java中定义静态方法使用static关键字，kotlin则使用单例类的方式。

    单例类须知：
        Kotlin中的单例类会将整个类中所有的方法全部变成类似于静态方法的调用方式;
        如果不想使用单例类，但是想让类中的某一个方法或者变量变成静态的，可以使用companion object关键字；
        如果确实要定义真正的静态方法，那就在方法或者变量上方加上@JvmStatic(注意：@JvmStatic只能加在但李磊或者companion object中的方法上)

11.顶层方法
    顶层方法：指的是那些没有定义在任何类中的方法，Kotlin会将所有的顶层方法全部编译成静态方法。
    定义顶层方法：New--->Kotlin--->File/Class,在弹出的对话框中输入文件名即可(类型要选择File)

12.变量延迟初始化和密封类
    变量延迟初始化:
        使用场景：类中存在很多全局变量，明知确定不为空，但是按照Kotlin的空指针判断语法标准，需要做大量的非空判断保护
        如何使用：lateinit关键字
        存在的风险：变量延迟初始化后，还没有进行初始化操作之前，调用变量，就会抛出异常--UninitializedPropertyAccessException
        规避措施：通过代码来判断一个全局变量是否已经完成了初始化，这样可以避免在某些时候有效的避免重复对某一个变量进行初始化操作
            示例代码：if(!::adapter.isInitialized){
                        adapter = MsgAdapter(msgList)
                    }
    密封类:
        密封类及其所有子类只能定义在同一个文件的顶层位置，不能嵌套在其他类中，这是密封类的实现机制所限制的
        作用：去除多余的else分支处理
