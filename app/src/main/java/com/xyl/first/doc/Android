1.Log Level
    v: verbose, 最低等级最低的，打印琐碎、意义最小的日志
    d: debug，打印调试信息
    i: info，打印比较重要的信息
    w: warn，打印警告信息(提示程序潜在风险、最好修复一下这些警告的地方)
    e: error，打印程序中的错误信息
    使用范例：Log.e(TAG,"Error info!!!")

2.弃用println使用Log的原因：
    开关不可控制
    不能添加日志标签
    日志没有等级区分
    Log可配合Studio的Logcat工具进行日志的过滤，还支持正则表达式过滤

3.认识编程语言：编译型语言和解释型语言
    编程语言大概分为两种：编译型语言和解释型语言
    编译型语言特点：
        编译器会将我们编写的源代码一次性地编译成计算机可识别的二进制文件，然后计算机直接执行，例如C和C++

    解释型语言特点：它有一个解释器，在程序运行时，解释器会一行行读取我们编写的源代码，然后实时地将这些源代码解释成计算机可识别的二进制数据后再执行，
        因此解释型语言通常效率会差一些，例如Python和JavaScript

    Java属于解释型语言：原因在于java代码确实是要先编译再运行的，但是java代码编译后生成的并不是计算机可识别的二进制文件，而是一种特殊的class文件，
        这种class文件只有java虚拟机才能识别，而这个java虚拟机担当的就是解释器的角色，它会在程序运行时将编译后的class文件解释成计算机可识别的二进制数据
        后再执行，因此，准确来讲，java属于解释型语言。

4.五大组件
    Activity:是一种包含用户界面的组件，主要用于和用户进行交互。
    Fragment:是一种可以嵌入在Activity当中的UI片段

5.Activity的状态、生命周期、生存期、跳转、数据传递、返回栈、数据被回收、启动模式、退出
    状态：每个Activity在生命周期中最多可能有4种状态
        1)运行状态:Activity位于返回栈的栈顶，系统最不愿意回收这种状态下的Activity,因为用户体验很差
        2)暂停状态：Activity不处于栈顶，但是仍然可见时
        3)停止状态：Activity不处于栈顶，完全不可见时
        4)销毁状态：Activity从返回栈移除后，就变成了销毁状态（系统最倾向于回收这种状态的Activity,以保证手机的内存充足）

    生命周期:
        onCreate:Activity第一次创建时调用，可以做加载布局、初始化资源的操作
        onStart:Activity由不可见变为可见时候调用
        onResume:Activity准备好用户进行交互的时候调用，处于栈顶，并且处于运行状态
        onPause:准备去启动或者恢复另一个Activity的时候调用
        onStop:Activity完全不可见的时候调用
        onDestroy:Activity被销毁之前调用，调用之后Activity状态变为销毁状态
        onRestart:Activity由停止状态变为运行状态之前调用，也就是Activity被重新启动了。

    生存期：
        完整生存期：onCreate~onDestroy方法之间所经历的就是完整生存期
        可见生存期：onStart~onStop方法之间所经历的就是可见生存期
        前台生存期：onResume和onPause方法之间所经历的就是前台生存期

    页面跳转：
        // 只进行跳转操作
        startActivity(Intent(this,DemoActivity::class.java)

        // 跳转并接收回调数据
        val activityZoneIntent = Intent(this, FirstActivity::class.java)
            val testData2 = "TestData2"
            val demoData:DemoClass
            val bundle = Bundle().apply {
                putParcelable("total_data", DemoClass::java.class)
                putString("sort_data", testData2)
                putInt("sort_name", 1)
            }
        activityZoneIntent.putExtra("bundle", bundle)

        val startActivity = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
            接收回调回来的数据，并进行处理
        }
        startActivity.launch(activityZoneIntent)

    数据传递与获取:
        传递:
        val data = "Test data"
        startActivity(Intent(this,FirstActivity::class.java).apply {
            putExtra("data_key",data)
        })
        获取:
        val extraData = intent.getStringExtra("data_key")

    返回栈:
        Android是使用任务来管理Activity的，一个任务就是一组存放在栈里的Activity的集合，这个栈也被称作任务栈。
        栈是一种后进先出的数据结构，在默认情况下，每当我们启动了一个新的Activity,他就会在返回栈中入栈，并处于栈顶的位置。
        每当我们按下back键或调用finish方法去销毁一个Activity时，处于栈顶的Activity就会出战，前一个入栈的Activity就会重新处于栈顶的位置。
        系统总是会显示处于栈顶的Activity给用户。

    数据被回收:
        Activity中提供了一个onSaveInstanceState回调方法，这个方法保证在Activity被回收之前一定会被调用。
        onSaveInstanceState方法会携带一个Bundle类型的参数，Bundle提供了一系列的方法用于保存数据(键值对的方式)

        具体使用：onSaveInstanceState方法中进行数据保存，onCreate方法中进行数据恢复
        override fun onSaveInstanceState(outState:Bundle?){
            super.onSaveInstanceState(outState)
            val tempData = "Something you just typed"
            outState.putString("data_key",tempData)
        }

        override fun onCreate(savedInstanceState:Bundle?){
            if (savedInstanceState != null) {
                val tempData = savedInstanceState.getString("data_key")
            }
        }

    启动模式:
        standard:Activity的默认启动模式，每当启动一个新的Activity，无论此Activity是否在返回栈中，它都会创建一个该Activity的新实例，在返回栈中入栈，并处于栈顶的位置。
        singleTop:在启动新Activity的时候，会先检查返回栈的栈顶是否是当前Activity，如果是则直接使用，如果不是再去创建一个新的Activity实例，并将其放入返回栈，置于栈顶
        singleTask:在启动新Activity的时候，首先去返回栈中检查是否存在当前Activity的实例，如存在则直接使用，并把这个Activity之上所有其它Activity统统出栈，如果没有则重新创建一个实例，置于栈顶。
        singleInstance:表示Activity会启用一个新的返回栈来管理当前Activity

        声明方式：AndroidManifest--->application--->Activity---> android:launchMode="singleInstance"

    退出:
        退出当前Activity-----> finish()
        退出程序：
            思路:所有Activity都继承BaseActivity，然后在BaseActivity的onCreate方法中，将activity加入到集合中，在退出程序的地方，remove掉集合中所有的activity
        代码实现：
            工具类：
            object ActivityCollector{
                private val activities = ArrayList<Activity>
                fun addActivity(activity:Activity){activities.add(activity)}
                fun removeActivity(activity:Activity){activities.remove(activity)}
                fun finishAll(){
                    for(activity in activities){
                        if(!activity.isFinishing){
                            activity.finish(
                        }
                    }
                    activities.clear()
                }
            }

            // BaseActivity
            open class BaseActivity:AppCompatActivity(){
                override fun onCreate(saveInstanceState:Bundle?){
                    super.onCreate(saveInstanceState)
                    ActivityCollector.addActivity(this)
                }

                override fun onDestroy(){
                    super.onDestroy()
                    ActivityCollector.removeActivity(this)
                }
            }

            // 程序退出(销毁所有Activity后在杀掉当前进程，保证程序完全退出)
            备注：killProcess方法用于杀掉一个进程，它接收一个进程id参数，我们通过myPid方法获得当前程序的进程id，killProcess只能用于杀掉当前程序的进程，不能用于杀掉其它程序
            ActivityCollector.finishAll()
            android.os.Process.killProcess(android.os.Process.myPid())

6.UI控件的常见属性
    android:gravity ---> 文字在控件中的对齐方式
    android:layout_gravity ---> 控件在布局中的对齐方式
    LinearLayout的默认排列方向是：horizontal,即水平方向
    android:layout_weight ---> 指定控件的宽度或者高度的比例，一般配合宽/高0dp使用
    android:layout_above ---> 当前控件位于目标控件的上方，例如：android:layout_above="@id/button1",即当前控件位于button1的上方
    android:layout_below ---> 当前控件位于目标控件的下方，例如：android:layout_below="@id/button1",即当前控件位于button1的下方
    android:layout_alignLeft ---> 当前控件与目标控件的左边缘对齐
    android:layout_alignParentLeft ---> 当前控件与父布局的左边缘对齐
    android:maxLines --->表示控件的文本最大显示行数
    android:ellipsize --->表示当文本超出控件宽度时，文本的缩略方式，例如尾部缩略：android:ellipsize="end"

7. LayoutInflate.inflate方法中有三个参数：resourceId,parent,attachToRoot
    resourceId:布局文件资源id
    parent:表示View的根节点
    attachToRoot:false则表示只会将布局转换成对应的View，不会添加到我们传进来的root节点中，true则表示会将布局转换的view添加到root节点中去，相当于addView

8.RecyclerView的基本使用
    自定义Adapter需要继承RecyclerView.Adapter
    onCreateViewHolder:用于创建ViewHolder实例，在这个方法中加载item布局，创建ViewHolder实例，并把加载出来的布局传入ViewHolder类的构造函数中
    onBindViewHolder:用于给RecyclerView的子项数据进行赋值，会在每个子项被滚到屏幕内的时候执行，这里通过position来获取item数据，将其设置到ViewHolder中的子项控件中
    getItemCount:返回数据源的长度，也就是item的数量
    item点击事件:可以在onCreateViewHolder方法中进行点击事件的注册，数据通过position来获得
        例如：
            1)整个item的点击事件viewHolder.itemView.setOnClickListener{ }
            2)item中子控件的点击事件viewHolder.text.setOnClickListener{ }
    adapter.notifyItemInserted(position)：在指定位置插入item
    adapter.scrollToPosition(position)：定位到列表中position的位置

9.Fragment
    定义:Fragment是一种可以嵌入在Activity当中的UI片段，它能让程序更加合理和充分地利用大屏幕的空间，因而在平板上应用的非常广泛。
    布局加载:onCreateView方法中，inflater.inflate(R.layout.fragment_demo,container,false)
    静态加载：xml中使用fragment标签，使用name属性指定fragment的全路径
    动态替换：创建Fragment实例-->调用getSupportFragmentManager-->开启事务beginTransaction-->向容器添加或者替换fragment(add/replace,传入容器id和实例)-->提交事务(commit)
    生命周期：
        四种状态：运行、暂停、停止、销毁
        周期方法：大致与Activity相同，但是还有几个不同的地方，如下：
            onAttach：当Fragment与Activity建立关联时调用
            onCreateView:为Fragment创建视图(加载布局)时调用
            onActivityCreate：确保与Fragment相关联的Activity已经创建完毕时调用
            onDestroyView:当与Fragment关联的视图被移除时调用
            onDetach:当Fragment和Activity接触关联时调用
        周期方法执行顺序：onAttach--->onCreate--->onCreateView--->onActivityCreated--->onStart--->onResume--->onPause--->onStop--->onDestroyView--->onDestroy--->onDetach

    返回栈:事务中添加返回栈--->addToBackStack
        示例代码：val fragmentManager = supportFragmentManager
                val transaction = fragmentManager.beginTransaction()
                transaction.replace(R.id.frame_layout,fragment)
                transaction.addToBackStack(null)
                transaction.commit()
    Fragment的

10.资源限定符
    使用限定符，可以使程序能够根据设备的分辨率、屏幕大小，在运行时决定加载哪个图片资源、布局，进行适配
    大小限定符:small(小屏幕)、normal(中等屏幕)、large(大屏幕)、xlarge(超大屏幕)
    分辨率限定符:ldpi(低分辨率)、mdpi(中分辨率)、hdpi(高分辨率)、xhdpi(超高分辨率)、xxhdpi(超超高分辨率)
    方向限定符：land(提供给横屏设备的资源)、port(提供给竖屏设备的资源)
    最小宽度限定符:large限定符没有一个明确的数值，当希望可以更加灵活的为不同设备加载布局，不管是否被认定为large，这时就可以使用最小宽度限定符
        示例：res--->layout-sw600dp文件夹，在这个文件夹下新建activity_main.xml布局，意味当程序运行在屏幕宽度大于等于600dp的设备商，会加载layout-sw600dp文件夹中的布局文件

11.